import streamlit as st
import pandas as pd
import os

# --- Cores da Sua Logo (Substitua pelos c√≥digos hexadecimais da sua marca!) ---
# Voc√™ pode usar ferramentas online (como "color picker from image" no Google)
# para extrair as cores da sua Slide1.JPG.
PRIMARY_COLOR = "#007BFF"  # Exemplo: cor principal para t√≠tulos e bot√µes
SECONDARY_COLOR = "#28A745" # Exemplo: cor secund√°ria para cabe√ßalhos de se√ß√£o e hover
TEXT_COLOR = "#333333"      # Exemplo: cor para textos gerais (opcional, Streamlit j√° tem um bom padr√£o)

# --- Configura√ß√µes Iniciais da P√°gina ---
st.set_page_config(layout="wide", page_title="Briefing de Clientes")

# --- Injetar CSS Personalizado para as Cores ---
st.markdown(f"""
    <style>
    /* Estilo para o t√≠tulo principal do app */
    .st-emotion-cache-1jmve3k {{ /* Esta classe pode variar em futuras vers√µes do Streamlit */
        color: {PRIMARY_COLOR};
    }}
    /* Estilo para os cabe√ßalhos de se√ß√£o (Etapa 1, Etapa 2, etc.) */
    h2 {{
        color: {SECONDARY_COLOR};
    }}
    /* Estilo para bot√µes de submiss√£o de formul√°rio */
    .st-emotion-cache-nahz7x.e1nzilvr1 {{ /* Esta classe pode variar em futuras vers√µes do Streamlit */
        background-color: {PRIMARY_COLOR};
        color: white;
        border-color: {PRIMARY_COLOR};
    }}
    .st-emotion-cache-nahz7x.e1nzilvr1:hover {{ /* Efeito hover para bot√µes de formul√°rio */
        background-color: {SECONDARY_COLOR};
        border-color: {SECONDARY_COLOR};
        color: white;
    }}
    .st-emotion-cache-nahz7x.e1nzilvr1:focus:not(:active) {{ /* Efeito foco para bot√µes de formul√°rio */
        background-color: {PRIMARY_COLOR};
        border-color: {PRIMARY_COLOR};
        color: white;
        box-shadow: none;
    }}
    /* Estilo para bot√µes de navega√ß√£o (Voltar, Avan√ßar, Salvar) */
    div.stButton > button:first-child {{
        background-color: {PRIMARY_COLOR};
        color: white;
        border-color: {PRIMARY_COLOR};
    }}
    div.stButton > button:first-child:hover {{ /* Efeito hover para bot√µes de navega√ß√£o */
        background-color: {SECONDARY_COLOR};
        border-color: {SECONDARY_COLOR};
        color: white;
    }}
    </style>
""", unsafe_allow_html=True)

# --- Adicionar Logotipo ---
# Certifique-se de que 'Slide1.JPG' esteja na mesma pasta do seu script Python.
st.image("Slide1.JPG", width=200) # Ajuste 'width' para o tamanho ideal da sua logo no app

# Inicializa o estado da sess√£o para controlar as etapas e os dados
if 'current_step' not in st.session_state:
    st.session_state.current_step = 1
if 'briefing_data' not in st.session_state:
    st.session_state.briefing_data = {}
# Novo estado para controlar se o briefing foi finalizado e o download deve ser exibido
if 'briefing_finalizado' not in st.session_state:
    st.session_state.briefing_finalizado = False


st.title("Briefing de Clientes VIMAK PLAMEJADOS üìù")

# --- Fun√ß√µes para Navega√ß√£o e Salvamento ---

def next_step():
    st.session_state.current_step += 1

def previous_step():
    st.session_state.current_step -= 1

def save_briefing_to_csv(data):
    csv_file = "briefings_clientes.csv"
    df = pd.DataFrame([data])
    if os.path.exists(csv_file):
        existing_df = pd.read_csv(csv_file)
        df = pd.concat([existing_df, df], ignore_index=True)
    df.to_csv(csv_file, index=False)
    st.success(f"Briefing salvo com sucesso em '{csv_file}'!")
    st.session_state.briefing_finalizado = True # Seta o estado para mostrar o bot√£o de download


# --- Etapa 1: Cadastro do Cliente ---
if st.session_state.current_step == 1:
    st.header("Etapa 1: Cadastro do Cliente")
    with st.form("cadastro_cliente_form"):
        st.session_state.briefing_data['nome'] = st.text_input("Nome Completo", value=st.session_state.briefing_data.get('nome', ''))
        st.session_state.briefing_data['endereco'] = st.text_input("Endere√ßo (Rua, N√∫mero, Complemento)", value=st.session_state.briefing_data.get('endereco', ''))
        st.session_state.briefing_data['cidade'] = st.text_input("Cidade", value=st.session_state.briefing_data.get('cidade', ''))
        st.session_state.briefing_data['bairro'] = st.text_input("Bairro", value=st.session_state.briefing_data.get('bairro', ''))
        st.session_state.briefing_data['cep'] = st.text_input("CEP", value=st.session_state.briefing_data.get('cep', ''))
        st.session_state.briefing_data['telefone'] = st.text_input("Telefone", value=st.session_state.briefing_data.get('telefone', ''))
        st.session_state.briefing_data['email'] = st.text_input("E-mail", value=st.session_state.briefing_data.get('email', ''))

        submitted1 = st.form_submit_button("Avan√ßar para Etapa 2")
        if submitted1:
            if not all([st.session_state.briefing_data['nome'], st.session_state.briefing_data['telefone']]):
                st.error("Nome e Telefone s√£o obrigat√≥rios.")
            else:
                next_step()
                st.rerun()

# --- Etapa 2: Briefing do Im√≥vel e Ambiente ---
elif st.session_state.current_step == 2:
    st.header("Etapa 2: Briefing do Im√≥vel e Ambiente")
    with st.form("briefing_imovel_form"):
        st.session_state.briefing_data['tipo_imovel'] = st.radio(
            "Tipo de Im√≥vel",
            options=["Casa", "Apartamento"],
            index=0 if st.session_state.briefing_data.get('tipo_imovel') == "Casa" else 1 if st.session_state.briefing_data.get('tipo_imovel') == "Apartamento" else 0
        )
        st.session_state.briefing_data['situacao_imovel'] = st.radio(
            "Situa√ß√£o do Im√≥vel",
            options=["Pr√≥pria", "Alugada"],
            index=0 if st.session_state.briefing_data.get('situacao_imovel') == "Pr√≥pria" else 1 if st.session_state.briefing_data.get('situacao_imovel') == "Alugada" else 0
        )
        st.session_state.briefing_data['ambientes'] = st.multiselect(
            "Ambientes a Serem Projetados",
            options=["Cozinha", "Sala de Estar/Jantar", "Banheiro", "Dormit√≥rio", "Lavabo", "√Årea de Servi√ßo", "Escrit√≥rio", "Outros"],
            default=st.session_state.briefing_data.get('ambientes', [])
        )
        if "Outros" in st.session_state.briefing_data['ambientes']:
            st.session_state.briefing_data['outros_ambientes_desc'] = st.text_input("Especifique outros ambientes", value=st.session_state.briefing_data.get('outros_ambientes_desc', ''))
        else:
            st.session_state.briefing_data['outros_ambientes_desc'] = ""

        col1, col2 = st.columns(2)
        with col1:
            if st.form_submit_button("Voltar para Etapa 1"):
                previous_step()
                st.rerun()
        with col2:
            submitted2 = st.form_submit_button("Avan√ßar para Etapa 3")
            if submitted2:
                next_step()
                st.rerun()

# --- Etapa 3: Prefer√™ncias e Estilo ---
elif st.session_state.current_step == 3:
    st.header("Etapa 3: Prefer√™ncias e Estilo")
    with st.form("preferencias_estilo_form"):
        st.session_state.briefing_data['cor_predominante'] = st.text_input(
            "Cor Predominante/Paleta de Cores",
            value=st.session_state.briefing_data.get('cor_predominante', '')
        )
        st.session_state.briefing_data['estilo'] = st.selectbox(
            "Estilo",
            options=["Moderno", "Cl√°ssico", "Minimalista", "Industrial", "R√∫stico", "Contempor√¢neo", "Outro"],
            index=["Moderno", "Cl√°ssico", "Minimalista", "Industrial", "R√∫stico", "Contempor√¢neo", "Outro"].index(st.session_state.briefing_data.get('estilo', "Moderno"))
        )
        if st.session_state.briefing_data['estilo'] == "Outro":
            st.session_state.briefing_data['outro_estilo_desc'] = st.text_input("Especifique outro estilo", value=st.session_state.briefing_data.get('outro_estilo_desc', ''))
        else:
            st.session_state.briefing_data['outro_estilo_desc'] = ""

        st.session_state.briefing_data['perfil_cliente'] = st.text_area(
            "Perfil do Cliente/Usu√°rio (Ex: Fam√≠lia com crian√ßas, pessoa solteira, gosta de cozinhar)",
            value=st.session_state.briefing_data.get('perfil_cliente', '')
        )
        st.session_state.briefing_data['material_pedra'] = st.selectbox(
            "Material de Pedra (se aplic√°vel)",
            options=["Nenhum", "Granito", "M√°rmore", "Quartzo", "Porcelanato", "Outro"],
            index=["Nenhum", "Granito", "M√°rmore", "Quartzo", "Porcelanato", "Outro"].index(st.session_state.briefing_data.get('material_pedra', "Nenhum"))
        )
        if st.session_state.briefing_data['material_pedra'] == "Outro":
            st.session_state.briefing_data['outro_material_pedra_desc'] = st.text_input("Especifique outro material de pedra", value=st.session_state.briefing_data.get('outro_material_pedra_desc', ''))
        else:
            st.session_state.briefing_data['outro_material_pedra_desc'] = ""

        st.session_state.briefing_data['tipo_iluminacao'] = st.multiselect(
            "Tipo de Ilumina√ß√£o Preferida",
            options=["Luz Quente", "Luz Fria", "Luz Neutra", "Ilumina√ß√£o Ambiente", "Ilumina√ß√£o Funcional", "Ilumina√ß√£o Decorativa"],
            default=st.session_state.briefing_data.get('tipo_iluminacao', [])
        )

        col1, col2 = st.columns(2)
        with col1:
            if st.form_submit_button("Voltar para Etapa 2"):
                previous_step()
                st.rerun()
        with col2:
            submitted3 = st.form_submit_button("Avan√ßar para Etapa 4")
            if submitted3:
                next_step()
                st.rerun()

# --- Etapa 4: Detalhamento dos Componentes dos M√≥veis ---
elif st.session_state.current_step == 4:
    st.header("Etapa 4: Detalhamento dos Componentes dos M√≥veis")
    with st.form("detalhamento_moveis_form"):
        st.session_state.briefing_data['tipo_corredicas'] = st.selectbox(
            "Tipo de Corredi√ßas",
            options=["Telesc√≥pica", "Invis√≠vel (Oculta)", "Roller", "N√£o se aplica/N√£o sabe"],
            index=["Telesc√≥pica", "Invis√≠vel (Oculta)", "Roller", "N√£o se aplica/N√£o sabe"].index(st.session_state.briefing_data.get('tipo_corredicas', "Telesc√≥pica"))
        )
        st.session_state.briefing_data['tipo_dobradicas'] = st.selectbox(
            "Tipo de Dobradi√ßas",
            options=["Com Amortecimento (Slow Motion)", "Sem Amortecimento", "Outro/N√£o sabe"],
            index=["Com Amortecimento (Slow Motion)", "Sem Amortecimento", "Outro/N√£o sabe"].index(st.session_state.briefing_data.get('tipo_dobradicas', "Com Amortecimento (Slow Motion)"))
        )
        if st.session_state.briefing_data['tipo_dobradicas'] == "Outro/N√£o sabe":
            st.session_state.briefing_data['outro_dobradica_desc'] = st.text_input("Especifique outro tipo de dobradi√ßa", value=st.session_state.briefing_data.get('outro_dobradica_desc', ''))
        else:
            st.session_state.briefing_data['outro_dobradica_desc'] = ""

        st.session_state.briefing_data['tipo_articulador'] = st.selectbox(
            "Tipo de Articulador (para portas basculantes)",
            options=["Pist√£o a G√°s", "Articulador Tipo Compasso", "Hettich", "Blum", "Outro/N√£o se aplica"],
            index=["Pist√£o a G√°s", "Articulador Tipo Compasso", "Hettich", "Blum", "Outro/N√£o se aplica"].index(st.session_state.briefing_data.get('tipo_articulador', "Pist√£o a G√°s"))
        )
        if st.session_state.briefing_data['tipo_articulador'] == "Outro/N√£o se aplica":
            st.session_state.briefing_data['outro_articulador_desc'] = st.text_input("Especifique outro tipo de articulador", value=st.session_state.briefing_data.get('outro_articulador_desc', ''))
        else:
            st.session_state.briefing_data['outro_articulador_desc'] = ""

        st.session_state.briefing_data['perfil_puxadores'] = st.multiselect(
            "Perfil de Puxadores",
            options=["Embutido (Cava)", "Externo (Aparente)", "Perfil Gola", "Sem puxador (fecho toque)", "Outro"],
            default=st.session_state.briefing_data.get('perfil_puxadores', [])
        )
        if "Outro" in st.session_state.briefing_data['perfil_puxadores']:
            st.session_state.briefing_data['outro_puxador_desc'] = st.text_input("Especifique outro perfil de puxador", value=st.session_state.briefing_data.get('outro_puxador_desc', ''))
        else:
            st.session_state.briefing_data['outro_puxador_desc'] = ""

        st.session_state.briefing_data['detalhe_cava'] = st.selectbox(
            "Detalhe da Cava (se aplic√°vel)",
            options=["Cava Reta", "Cava 45 Graus", "Cava Usinada", "N√£o se aplica"],
            index=["Cava Reta", "Cava 45 Graus", "Cava Usinada", "N√£o se aplica"].index(st.session_state.briefing_data.get('detalhe_cava', "N√£o se aplica"))
        )
        st.session_state.briefing_data['puxador_passante'] = st.radio(
            "Puxador Passante",
            options=["Sim", "N√£o"],
            index=0 if st.session_state.briefing_data.get('puxador_passante') == "Sim" else 1 if st.session_state.briefing_data.get('puxador_passante') == "N√£o" else 1
        )

        col1, col2 = st.columns(2)
        with col1:
            if st.form_submit_button("Voltar para Etapa 3"):
                previous_step()
                st.rerun()
        with col2:
            submitted4 = st.form_submit_button("Finalizar Briefing e Salvar")
            if submitted4:
                save_briefing_to_csv(st.session_state.briefing_data)
                # O st.success e o st.download_button ser√£o exibidos depois do rerunning
                # e fora do form, gra√ßas ao st.session_state.briefing_finalizado = True
                st.rerun() # Dispara um rerun para que o estado atualize e o bot√£o seja exibido

# --- Exibir bot√£o de download e resetar o formul√°rio AP√ìS a Etapa 4 ser finalizada ---
# Este bloco agora est√° FORA de qualquer st.form()
if st.session_state.briefing_finalizado:
    st.success("Briefing finalizado! Voc√™ pode baixar o CSV abaixo ou iniciar um novo briefing.")
    csv_file = "briefings_clientes.csv"
    if os.path.exists(csv_file):
        with open(csv_file, "rb") as file:
            st.download_button(
                label="Baixar CSV dos Briefings",
                data=file,
                file_name=csv_file,
                mime="text/csv"
            )
    # Bot√£o para iniciar um novo briefing
    if st.button("Iniciar Novo Briefing"):
        st.session_state.briefing_data = {}
        st.session_state.current_step = 1
        st.session_state.briefing_finalizado = False # Reseta o estado
        st.rerun()